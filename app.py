# import streamlit as st
# from dotenv import load_dotenv
# import os
# from backend.qa_chain import get_answer

# # Load environment variables
# load_dotenv()

# # --- Page Configuration ---
# st.set_page_config(page_title="MeitY AI Agent", layout="wide")

# # --- Custom CSS for Styling ---
# st.markdown("""
# <style>
#     /* Main app background */
#     .stApp {
#         background-color: #1a1a2e;
#         color: #e0e0e0;
#     }
#     /* Sidebar styling */
#     [data-testid="stSidebar"] {
#         background-color: #162447;
#     }
#     [data-testid="stSidebar"] h2 {
#         color: #ffffff;
#     }
#     [data-testid="stSidebar"] p, [data-testid="stSidebar"] li {
#         color: #b3b3b3;
#     }
#     /* Main content styling */
#     .stTextArea textarea {
#         background-color: #2e2e48;
#         color: #ffffff;
#         border: 1px solid #4a4a6a;
#         min-height: 200px;
#     }
#     .stButton button {
#         background-color: #1f4068;
#         color: #ffffff;
#         border: 1px solid #1b263b;
#     }
#     .stButton button:hover {
#         background-color: #2c5d91;
#         border-color: #1b263b;
#         color: #ffffff;
#     }
#     /* Chat message styling */
#     [data-testid="stChatMessage"] {
#         background-color: #25253D;
#         border-radius: 0.5rem;
#         padding: 1rem;
#     }
# </style>
# """, unsafe_allow_html=True)


# # --- Sidebar Content ---
# with st.sidebar:
#     st.title("MeitY Knowledge Base AI Agent üí°")
#     st.markdown("---")
#     st.header("About")
#     st.markdown("""
#     This Generative AI Agent App can generate answers for questions based on its knowledge base, 
#     which is built from documents, websites, and YouTube videos related to the 
#     Ministry of Electronics and IT (MeitY), Government of India.
#     """)
    
#     st.markdown("---")
#     st.header("Technologies")
#     st.markdown("""
#     This app is built using a combination of open, secure, and free technologies:
#     - **LLM:** Together AI (Mistral)
#     - **Framework:** LangChain
#     - **Embeddings:** BAAI BGE
#     - **Vector Store:** FAISS
#     - **Frontend:** Streamlit
#     - **Deployment:** Docker & Azure App Service
#     """)

# # --- Main Page Content ---
# # In app.py, inside the 'with col2:' block

# st.markdown("""
#     <h2 style='text-align: center;'>
#         <span style='font-size: 0.7em;'>üóØÔ∏èüáÆüá≥</span> 
#         Ministry of Electronics and Information Technology (MeitY) Questions AI Agent
#     </h2>
#     """, unsafe_allow_html=True)

# # Initialize session state for storing the latest query and response
# if "latest_query" not in st.session_state:
#     st.session_state.latest_query = ""
# if "latest_response" not in st.session_state:
#     st.session_state.latest_response = None

# # --- Input Form ---
# with st.form("query_form"):
#     query_text = st.text_area("Please enter your question here:", height=150)
#     submitted = st.form_submit_button("Submit")

# if submitted and query_text:
#     st.session_state.latest_query = query_text
#     with st.spinner("Generating answer..."):
#         st.session_state.latest_response = get_answer(query_text)

# # --- Display Response ---
# if st.session_state.latest_response:
#     st.markdown("---")
#     st.markdown(f"### Question:\n> {st.session_state.latest_query}")
    
#     response_data = st.session_state.latest_response
#     st.markdown(f"### Answer, generated by AI:")
#     st.write(response_data.get("answer", "No answer was generated."))

#     source_docs = response_data.get("source_documents", [])
#     if source_docs:
#         st.markdown("### Reference(s):")
#         for i, doc in enumerate(source_docs):
#             source_name = doc.metadata.get("source", "Unknown Source")
            
#             # Create a clean, readable name for the source
#             display_name = os.path.basename(source_name) if 'http' not in source_name else source_name.split('/')[-1]
            
#             # Provide the content of the source document for the download button
#             try:
#                 # For local files, read the content
#                 if os.path.exists(source_name):
#                     with open(source_name, "rb") as f:
#                         file_content = f.read()
                    
#                     st.download_button(
#                         label=f"[{i+1}]: Download {display_name}",
#                         data=file_content,
#                         file_name=display_name,
#                         key=f"download_{i}"
#                     )
#                 else:
#                     # For web links, just display the link
#                     st.markdown(f"[{i+1}]: [{display_name}]({source_name})")
#             except Exception as e:
#                 # Fallback for any other case
#                 st.markdown(f"[{i+1}]: {source_name}")




import streamlit as st
from dotenv import load_dotenv
import os
from backend.qa_chain import get_answer

# Load environment variables
load_dotenv()

# --- Streamlit Page Config ---
st.set_page_config(page_title="MeitY AI Agent", layout="wide")

# --- Custom CSS Styling ---
st.markdown("""
<style>
    .stApp { background-color: #1a1a2e; color: #e0e0e0; }
    [data-testid="stSidebar"] { background-color: #162447; }
    .stTextArea textarea { background-color: #2e2e48; color: #ffffff; border: 1px solid #4a4a6a; }
    .stButton button {
        background-color: #1f4068; color: #ffffff; border: 1px solid #1b263b;
    }
    .stButton button:hover {
        background-color: #2c5d91; border-color: #1b263b; color: #ffffff;
    }
    [data-testid="stChatMessage"] {
        background-color: #25253D;
        border-radius: 0.5rem;
        padding: 1rem;
    }
</style>
""", unsafe_allow_html=True)

# --- Sidebar ---
with st.sidebar:
    st.title("MeitY Knowledge Base AI Agent üí°")
    st.markdown("---")
    st.header("About")
    st.markdown("""
    This Generative AI Agent can answer queries based on documents, websites, and YouTube videos 
    related to the Ministry of Electronics and IT (MeitY), Government of India.
    """)
    st.markdown("---")
    st.header("Technologies Used")
    st.markdown("""
    - **LLM**: Together AI (Mistral)
    - **Framework**: LangChain
    - **Embeddings**: BAAI BGE
    - **Vector Store**: FAISS
    - **UI**: Streamlit
    - **Fallback**: Tavily Search API
    """)

# --- Main Page Title ---
st.markdown("""
    <h2 style='text-align: center;'>
        üóØÔ∏èüáÆüá≥ MeitY Knowledge Base AI Agent
    </h2>
""", unsafe_allow_html=True)

# --- Session State ---
if "latest_query" not in st.session_state:
    st.session_state.latest_query = ""
if "latest_response" not in st.session_state:
    st.session_state.latest_response = None

# --- Query Form ---
with st.form("query_form"):
    query_text = st.text_area("Please enter your question here:", height=150)
    submitted = st.form_submit_button("Submit")

if submitted and query_text:
    st.session_state.latest_query = query_text
    with st.spinner("Generating answer..."):
        st.session_state.latest_response = get_answer(query_text)

# --- Show Response ---
if st.session_state.latest_response:
    st.markdown("---")
    st.markdown(f"### Question:\n> {st.session_state.latest_query}")
    
    response_data = st.session_state.latest_response
    st.markdown("### Answer:")
    st.write(response_data.get("answer", "No answer generated."))

    source_docs = response_data.get("source_documents", [])
    if source_docs:
        st.markdown("### References:")
        
        # Get the base path for persistent storage from environment variables
        # This will be '/persistent_storage' on Azure and 'persistent_storage' locally
        PERSISTENT_DIR = os.environ.get("PERSISTENT_STORAGE_PATH", "persistent_storage")

        for i, doc in enumerate(source_docs[:5]):
            source = doc.metadata.get("source", "Unknown Source")
            
            # Check if the source is a local document path
            is_local_doc = 'source_documents' in source.replace('\\', '/')

            # Create a clean display name
            filename = os.path.basename(source)
            
            # --- MODIFIED LOGIC TO HANDLE AZURE PATHS ---
            if is_local_doc:
                # Construct the full path to the file within the mounted storage on Azure
                # Example: /persistent_storage/source_documents/report.pdf
                azure_file_path = os.path.join(PERSISTENT_DIR, source)
                
                if os.path.exists(azure_file_path):
                    with open(azure_file_path, "rb") as f:
                        file_data = f.read()
                    
                    st.download_button(
                        label=f"[{i+1}]: Download {filename}",
                        data=file_data,
                        file_name=filename,
                        key=f"file_{i}"
                    )
                else:
                    # Fallback if the file is not found in the Azure storage
                    st.markdown(f"[{i+1}]: {filename} (Source file not available for download)")
            
            else:  # It's a URL for scraped or YouTube content
                st.markdown(f"[{i+1}]: [{filename}]({source})")